(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{544:function(t,e,a){"use strict";a.r(e);var v=a(6),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vue数据代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue数据代理"}},[t._v("#")]),t._v(" vue数据代理")]),t._v(" "),a("ol",[a("li",[t._v("是什么？ 通过vm对象来代理data对象中所有属性的操作")]),t._v(" "),a("li",[t._v("作用：   简化操作vm中的data对象中的数据")]),t._v(" "),a("li",[t._v("实现基本原理\n"),a("ol",[a("li",[t._v("通过Object.defineProperty()给vm添加与data对象的属性对应的属性描述符")]),t._v(" "),a("li",[t._v("所有添加的属性都包含getter/setter")]),t._v(" "),a("li",[t._v("在getter/setter内部去操作data中对应的属性数据")])])])]),t._v(" "),a("h2",{attrs:{id:"数据绑定的原理基本理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据绑定的原理基本理解"}},[t._v("#")]),t._v(" 数据绑定的原理基本理解")]),t._v(" "),a("ol",[a("li",[t._v("作用:  实现数据的更新显示")]),t._v(" "),a("li",[t._v("基本原理:\n"),a("ol",[a("li",[t._v("通过Object.defineProperterty()给data中所有属性添加setter/getter, 实现数据劫持")]),t._v(" "),a("li",[t._v("为每个data中的属性创建一个对应的dep对象, 一旦属性数据变化, 通知dep对象")]),t._v(" "),a("li",[t._v("为模板中的每个表达式创建对应的watcher, 并关联到对应的dep上")]),t._v(" "),a("li",[t._v("一旦dep收到数据变化的通知, 会通知所有关联的watcher, watcher收到通知后就更新对应的节点")])])])]),t._v(" "),a("h2",{attrs:{id:"双向数据绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向数据绑定"}},[t._v("#")]),t._v(" 双向数据绑定")]),t._v(" "),a("p",[t._v("1). 双向数据绑定是建立在单向数据绑定(model==>View)的基础之上的\n2). 双向数据绑定的实现流程:\n* 在解析v-model指令时, 给当前元素添加input监听\n* 当input的value发生改变时, 将最新的值赋值给当前表达式所对应的data")])])}),[],!1,null,null,null);e.default=r.exports}}]);