(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{532:function(t,a,r){"use strict";r.r(a);var s=r(6),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"闭包的生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包的生命周期"}},[t._v("#")]),t._v(" 闭包的生命周期")]),t._v(" "),r("ul",[r("li",[t._v("产生：1 函数嵌套，2 内部函数引用外部函数的局部变量（当然前提是你要调用内部函数）")]),t._v(" "),r("li",[t._v("死亡：在内部函数成为垃圾对象时")])]),t._v(" "),r("h2",{attrs:{id:"作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),r("ul",[r("li",[t._v("可以在外部访问到函数内部的局部变量（通常由于作用域的原因，我们是无法正常在外部访问到函数的局部变量的，但是利用闭包就可以）")])]),t._v(" "),r("h2",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),r("ul",[r("li",[t._v("不及时清除会长期占用内存空间，过多使用闭包容易造成内存溢出")])]),t._v(" "),r("h2",{attrs:{id:"闭包是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包是什么"}},[t._v("#")]),t._v(" 闭包是什么")]),t._v(" "),r("ul",[r("li",[t._v("闭包准确来说应该是在内部函数的内存中存储的一个引用地址，这个引用地址指向内部函数使用外部局部变量所在的那个变量对象中，通常我们会认为闭包会延长局部变量的生命周期，但其实他会延长整个外部函数的变量对象的生命周期，因为这个引用地址指向的是整个对象，既然一个对象有被指向，但是如果我们用Chrome调试查看的话，会发现外部函数的变量对象中只会留下内部函数使用到的变量，并不是什么都有，这只不过是浏览器为了性能优化将不使用的变量从变量对象中清除掉了")])])])}),[],!1,null,null,null);a.default=e.exports}}]);